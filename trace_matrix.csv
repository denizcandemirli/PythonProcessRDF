model_feature,rdf_property,source_files,extraction_code(paths:lines),transformations,weight/role,used_in_metric,evidence_link
motif:M1_adjacentZone_ZZ,adjacentZone,subgraph_similarity.py;subgraph_similarity_v2.py;extract_features.py,"subgraph_similarity.py:12:- For symmetric predicates (adjacentElement, adjacentZone, intersectingElement) we add both directions. | subgraph_similarity.py:15:M1: Z --adjacentZone--> Z | subgraph_similarity.py:118:if pred.endswith(""adjacentElement"") or pred.endswith(""adjacentZone"") or pred.endswith(""intersectingElement""): | subgraph_similarity.py:170:# M1: Z -adjacentZone- Z | subgraph_similarity.py:171:G = dg(); add_nodes(G, {""a"":""zone"",""b"":""zone""}); G.add_edge(""a"",""b"", pred=""bot:adjacentZone""); | subgraph_similarity_v2.py:79:...:adjacentZone                                             -> adjacentzone | subgraph_similarity_v2.py:234:motifs[""M1_adjacentZone_ZZ""] = G | subgraph_similarity_v2.py:238:motifs[""M1b_adjacentZone_EZ""] = G | extract_features.py:26:""adjacentZone"": URIRef(NS[""bot""] + ""adjacentZone""), | extract_features.py:72:SEL = [P[""hasFunction""], P[""hasQuality""], P[""adjacentElement""], P[""adjacentZone""], P[""intersectingElement""], P[""hasConti | extract_features.py:94:(""adjacentZone"", P[""adjacentZone""]),",canon/localname heuristics,structural motif,cosine/jaccard/overlap,
motif:M2_adjacentElement_EE,adjacentElement,subgraph_similarity.py;subgraph_similarity_v2.py;structural_extension.py;extract_features.py,"subgraph_similarity.py:12:- For symmetric predicates (adjacentElement, adjacentZone, intersectingElement) we add both directions. | subgraph_similarity.py:16:M2: E --adjacentElement--> E | subgraph_similarity.py:21:M7: E1 --adjacentElement--> E2  and  E1 --core:hasFunction--> F | subgraph_similarity.py:22:M8: E1 --adjacentElement--> E2  and  E1 --core:hasQuality-->  Q | subgraph_similarity.py:118:if pred.endswith(""adjacentElement"") or pred.endswith(""adjacentZone"") or pred.endswith(""intersectingElement""): | subgraph_similarity_v2.py:8:* M2b_adjacentElement_EZ (element <-> zone adjacency) | subgraph_similarity_v2.py:78:...:AdjacentComponent / ...:adjacentElement / ...:isAdjacentTo  -> adjacentelement | subgraph_similarity_v2.py:242:motifs[""M2_adjacentElement_EE""] = G | subgraph_similarity_v2.py:246:motifs[""M2b_adjacentElement_EZ""] = G | subgraph_similarity_v2.py:271:motifs[""M7_adjacentElement_plus_Function""] = G | structural_extension.py:14:#    ('adjacentElement', 'intersectingElement', 'BFO_0000178', 'hasFunction'). | structural_extension.py:106:PRED_ADJ_EL   = 'adjacentElement' | structural_extension.py:228:# M2_frameNode: adjacentElement(E_beam – E_column) | structural_extension.py:230:# M4_core     : E_core -> P_*  AND exists adjacentElement(Core, SlabElement) or Part-of around | structural_extension.py:231:# M2_braceNode: adjacentElement(E_brace – (E_beam|E_column)) | extract_features.py:25:""adjacentElement"": URIRef(NS[""bot""] + ""adjacentElement""), | extract_features.py:72:SEL = [P[""hasFunction""], P[""hasQuality""], P[""adjacentElement""], P[""adjacentZone""], P[""intersectingElement""], P[""hasConti | extract_features.py:93:for label, pred in [(""adjacentElement"", P[""adjacentElement""]),",canon/localname heuristics,structural motif,cosine/jaccard/overlap,
motif:M3_intersectingElement_EE,intersectingElement,subgraph_similarity.py;subgraph_similarity_v2.py;structural_extension.py;extract_features.py,"subgraph_similarity.py:12:- For symmetric predicates (adjacentElement, adjacentZone, intersectingElement) we add both directions. | subgraph_similarity.py:17:M3: E --intersectingElement--> E | subgraph_similarity.py:118:if pred.endswith(""adjacentElement"") or pred.endswith(""adjacentZone"") or pred.endswith(""intersectingElement""): | subgraph_similarity.py:178:# M3: E -intersectingElement- E | subgraph_similarity.py:179:G = dg(); add_nodes(G, {""a"":""element"",""b"":""element""}); G.add_edge(""a"",""b"", pred=""bot:intersectingElement""); | subgraph_similarity_v2.py:9:* M3b_intersectingElement_EZ (element <-> zone intersection) | subgraph_similarity_v2.py:250:motifs[""M3_intersectingElement_EE""] = G | subgraph_similarity_v2.py:254:motifs[""M3b_intersectingElement_EZ""] = G | structural_extension.py:14:#    ('adjacentElement', 'intersectingElement', 'BFO_0000178', 'hasFunction'). | structural_extension.py:107:PRED_INT_EL   = 'intersectingElement' | structural_extension.py:229:# M3_wallSlab : intersectingElement(E_wall – E_slab) | extract_features.py:27:""intersectingElement"": URIRef(NS[""bot""] + ""intersectingElement""), | extract_features.py:72:SEL = [P[""hasFunction""], P[""hasQuality""], P[""adjacentElement""], P[""adjacentZone""], P[""intersectingElement""], P[""hasConti | extract_features.py:95:(""intersectingElement"", P[""intersectingElement""]),",canon/localname heuristics,structural motif,cosine/jaccard/overlap,
motif:M4_hasContinuantPart_EP,BFO_0000178,subgraph_similarity.py;subgraph_similarity_v2.py;structural_extension.py;extract_features.py,"subgraph_similarity.py:18:M4: E --BFO_0000178(hasContinuantPart)--> P | subgraph_similarity.py:122:#  - we infer 'part' also from being target of BFO_0000178 | subgraph_similarity.py:144:# part by incoming BFO_0000178 | subgraph_similarity.py:145:if ""BFO_0000178"" in ""|"".join(incoming_from_pred.get(n, set())): | subgraph_similarity.py:182:# M4: E -hasContinuantPart- P (BFO_0000178) | subgraph_similarity_v2.py:80:...:BFO_0000178                                              -> bfo_0000178 | structural_extension.py:14:#    ('adjacentElement', 'intersectingElement', 'BFO_0000178', 'hasFunction'). | structural_extension.py:108:PRED_PART     = 'BFO_0000178'          # hasContinuantPart | extract_features.py:28:""hasContinuantPart"": URIRef(NS[""bfo""] + ""BFO_0000178""),",canon/localname heuristics,structural motif,cosine/jaccard/overlap,
motif:M5_hasFunction_EF,hasFunction,subgraph_similarity.py;subgraph_similarity_v2.py;structural_extension.py;extract_features.py,"subgraph_similarity.py:19:M5: E --core:hasFunction--> F | subgraph_similarity.py:21:M7: E1 --adjacentElement--> E2  and  E1 --core:hasFunction--> F | subgraph_similarity.py:186:# M5: E -core:hasFunction- F | subgraph_similarity.py:187:G = dg(); add_nodes(G, {""a"":""element"",""f"":""function""}); G.add_edge(""a"",""f"", pred=""core:hasFunction""); | subgraph_similarity.py:188:motifs[""M5_hasFunction_EF""] = G | subgraph_similarity_v2.py:81:...:hasFunction                                              -> hasfunction | subgraph_similarity_v2.py:262:motifs[""M5_hasFunction_EF""] = G | structural_extension.py:14:#    ('adjacentElement', 'intersectingElement', 'BFO_0000178', 'hasFunction'). | structural_extension.py:109:PRED_HASFUNC  = 'hasFunction' | structural_extension.py:155:# s --hasFunction--> fnode ; get fnode type(s) | extract_features.py:23:""hasFunction"": URIRef(NS[""core""] + ""hasFunction""), | extract_features.py:52:for s, p, o in g.triples((None, P[""hasFunction""], None)): | extract_features.py:72:SEL = [P[""hasFunction""], P[""hasQuality""], P[""adjacentElement""], P[""adjacentZone""], P[""intersectingElement""], P[""hasConti",canon/localname heuristics,semantic motif,cosine/jaccard/overlap,
typed_edges:hasFunction,hasFunction,subgraph_similarity.py;subgraph_similarity_v2.py;structural_extension.py;extract_features.py,"subgraph_similarity.py:19:M5: E --core:hasFunction--> F | subgraph_similarity.py:21:M7: E1 --adjacentElement--> E2  and  E1 --core:hasFunction--> F | subgraph_similarity.py:186:# M5: E -core:hasFunction- F | subgraph_similarity.py:187:G = dg(); add_nodes(G, {""a"":""element"",""f"":""function""}); G.add_edge(""a"",""f"", pred=""core:hasFunction""); | subgraph_similarity.py:188:motifs[""M5_hasFunction_EF""] = G | subgraph_similarity_v2.py:81:...:hasFunction                                              -> hasfunction | subgraph_similarity_v2.py:262:motifs[""M5_hasFunction_EF""] = G | structural_extension.py:14:#    ('adjacentElement', 'intersectingElement', 'BFO_0000178', 'hasFunction'). | structural_extension.py:109:PRED_HASFUNC  = 'hasFunction' | structural_extension.py:155:# s --hasFunction--> fnode ; get fnode type(s) | extract_features.py:23:""hasFunction"": URIRef(NS[""core""] + ""hasFunction""), | extract_features.py:52:for s, p, o in g.triples((None, P[""hasFunction""], None)): | extract_features.py:72:SEL = [P[""hasFunction""], P[""hasQuality""], P[""adjacentElement""], P[""adjacentZone""], P[""intersectingElement""], P[""hasConti",canon/localname heuristics,typed-edge,cosine/jaccard/overlap,
typed_edges:hasQuality,hasQuality,subgraph_similarity.py;subgraph_similarity_v2.py;extract_features.py,"subgraph_similarity.py:20:M6: E --core:hasQuality-->  Q | subgraph_similarity.py:22:M8: E1 --adjacentElement--> E2  and  E1 --core:hasQuality-->  Q | subgraph_similarity.py:190:# M6: E -core:hasQuality- Q | subgraph_similarity.py:191:G = dg(); add_nodes(G, {""a"":""element"",""q"":""quality""}); G.add_edge(""a"",""q"", pred=""core:hasQuality""); | subgraph_similarity.py:192:motifs[""M6_hasQuality_EQ""] = G | subgraph_similarity_v2.py:82:...:hasQuality                                               -> hasquality | subgraph_similarity_v2.py:266:motifs[""M6_hasQuality_EQ""] = G | extract_features.py:24:""hasQuality"": URIRef(NS[""core""] + ""hasQuality""), | extract_features.py:59:for s, p, o in g.triples((None, P[""hasQuality""], None)): | extract_features.py:72:SEL = [P[""hasFunction""], P[""hasQuality""], P[""adjacentElement""], P[""adjacentZone""], P[""intersectingElement""], P[""hasConti",canon/localname heuristics,typed-edge,cosine/jaccard/overlap,
edge_sets:adjacentElement,adjacentElement,subgraph_similarity.py;subgraph_similarity_v2.py;structural_extension.py;extract_features.py,"subgraph_similarity.py:12:- For symmetric predicates (adjacentElement, adjacentZone, intersectingElement) we add both directions. | subgraph_similarity.py:16:M2: E --adjacentElement--> E | subgraph_similarity.py:21:M7: E1 --adjacentElement--> E2  and  E1 --core:hasFunction--> F | subgraph_similarity.py:22:M8: E1 --adjacentElement--> E2  and  E1 --core:hasQuality-->  Q | subgraph_similarity.py:118:if pred.endswith(""adjacentElement"") or pred.endswith(""adjacentZone"") or pred.endswith(""intersectingElement""): | subgraph_similarity_v2.py:8:* M2b_adjacentElement_EZ (element <-> zone adjacency) | subgraph_similarity_v2.py:78:...:AdjacentComponent / ...:adjacentElement / ...:isAdjacentTo  -> adjacentelement | subgraph_similarity_v2.py:242:motifs[""M2_adjacentElement_EE""] = G | subgraph_similarity_v2.py:246:motifs[""M2b_adjacentElement_EZ""] = G | subgraph_similarity_v2.py:271:motifs[""M7_adjacentElement_plus_Function""] = G | structural_extension.py:14:#    ('adjacentElement', 'intersectingElement', 'BFO_0000178', 'hasFunction'). | structural_extension.py:106:PRED_ADJ_EL   = 'adjacentElement' | structural_extension.py:228:# M2_frameNode: adjacentElement(E_beam – E_column) | structural_extension.py:230:# M4_core     : E_core -> P_*  AND exists adjacentElement(Core, SlabElement) or Part-of around | structural_extension.py:231:# M2_braceNode: adjacentElement(E_brace – (E_beam|E_column)) | extract_features.py:25:""adjacentElement"": URIRef(NS[""bot""] + ""adjacentElement""), | extract_features.py:72:SEL = [P[""hasFunction""], P[""hasQuality""], P[""adjacentElement""], P[""adjacentZone""], P[""intersectingElement""], P[""hasConti | extract_features.py:93:for label, pred in [(""adjacentElement"", P[""adjacentElement""]),",canon/localname heuristics,edge-set,cosine/jaccard/overlap,
